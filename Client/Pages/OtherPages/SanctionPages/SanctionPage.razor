@implements IDisposable
@if (allState.ShowSanction)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="">Sanction Information</h4>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }
                        <SfGrid DataSource="@Sanctions" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Sanction"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Sanction.EmployeeId) HeaderText="Id"></GridColumn>
                                <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{
                                            var item = (context as Sanction);
                                            <div>
                                                @item!.SanctionType!.Name
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Sanction.Date) HeaderText="Date"></GridColumn>
                                <GridColumn Field=@nameof(Sanction.Punishment) HeaderText="Punishment"></GridColumn>
                                <GridColumn Field=@nameof(Sanction.PunishmentDate) HeaderText="Punishment Date"></GridColumn>
                                <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{
                                            var employee = (context as Sanction);
                                            <i class="bi bi-pencil text-info pointer" @onclick="()=>EditClicked(employee!)"></i>
                                            <i class="bi bi-trash text-danger pointer" @onclick="()=>DeleteClicked(employee!)"></i>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<SanctionDialog @ref="sanctionDialog" ItemModel="ItemModel" SanctionTypes="SanctionTypes" HandleSaveOperationEvent="HandleSaveOperationEvent" />
@code {
    private SfGrid<Sanction>? DefaultGrid;
    SanctionDialog? sanctionDialog;
    Sanction ItemModel = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<SanctionType> SanctionTypes { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await Types();
        await GetSanction();
        allState.Action += StateHasChanged;
    }
    private async Task Types() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);
    private async Task GetSanction() => Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
    private async Task HandleSaveOperationEvent(Sanction item)
    {
        bool successCheck = false;
        var result = await sanctionService.Update(item, Constants.SanctionBaseUrl);
        successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetSanction();
        }
    }
    private void EditClicked(Sanction item)
    {
        ItemModel = item;
        OpenDialog();
    }
    private async Task DeleteClicked(Sanction item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete this?", "Confirm Delete");
        if (!confirm) return;

        var response = await sanctionTypeService.DeleteById(item.EmployeeId, Constants.SanctionBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetSanction();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
    void OpenDialog()
    {
        sanctionDialog?.OpenDialog();
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    //Excel export / Pdf Export
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }
}
